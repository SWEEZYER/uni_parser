import asyncio
import re
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from aiogram.types import Message
from university_parser import search_by_direction_and_city, get_unique_cities, find_city, \
    search_by_direction_and_city_college, get_unique_cities_college, find_city_college

router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SearchStates(StatesGroup):
    WAITING_FOR_ACTION = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∏—Å–∫ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤)
    WAITING_FOR_TYPE = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–ª–∏ –∫–æ–ª–ª–µ–¥–∂)
    WAITING_FOR_DIRECTION = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    WAITING_FOR_CITY = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞


# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.03.04)
direction_pattern = re.compile(r"^\d{2}\.\d{2}\.\d{2}$")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
        "1Ô∏è‚É£ –ù–∞–π—Ç–∏ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –≥–æ—Ä–æ–¥—É\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ 1 –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏–ª–∏ 2 –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤."
    )
    await state.set_state(SearchStates.WAITING_FOR_ACTION)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∏—Å–∫ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤)
@router.message(SearchStates.WAITING_FOR_ACTION)
async def handle_action_choice(message: Message, state: FSMContext):
    choice = message.text.strip()
    await state.update_data(action_choice=choice)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è

    if choice == '1':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n1Ô∏è‚É£ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç\n2Ô∏è‚É£ –ö–æ–ª–ª–µ–¥–∂")
        await state.set_state(SearchStates.WAITING_FOR_TYPE)
    elif choice == '2':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:\n1Ô∏è‚É£ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç\n2Ô∏è‚É£ –ö–æ–ª–ª–µ–¥–∂")
        await state.set_state(SearchStates.WAITING_FOR_TYPE)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: –Ω–∞–ø–∏—à–∏—Ç–µ 1 –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ 2 –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.")


@router.message(SearchStates.WAITING_FOR_TYPE)
async def handle_type_choice(message: Message, state: FSMContext):
    choice = message.text.strip()
    await state.update_data(type_choice=choice)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è

    user_data = await state.get_data()
    action_choice = user_data.get('action_choice')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è

    if action_choice == '1':  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–∏—Å–∫
        if choice == '1' or choice == '2':
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 37.03.01):")
            await state.set_state(SearchStates.WAITING_FOR_DIRECTION)
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è: –Ω–∞–ø–∏—à–∏—Ç–µ 1 –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–ª–∏ 2 –¥–ª—è –∫–æ–ª–ª–µ–¥–∂–∞.")
    elif action_choice == '2':  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        if choice == '1':
            cities = get_unique_cities()
            city_list = list(cities.values())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ —Å–ø–∏—Å–æ–∫
        elif choice == '2':
            cities = get_unique_cities_college()
            city_list = list(cities.values())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ —Å–ø–∏—Å–æ–∫
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è: –Ω–∞–ø–∏—à–∏—Ç–µ 1 –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–ª–∏ 2 –¥–ª—è –∫–æ–ª–ª–µ–¥–∂–∞.")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        chunk_size = 400  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        city_chunks = [city_list[i:i + chunk_size] for i in range(0, len(city_list), chunk_size)]

        for i, chunk in enumerate(city_chunks, start=1):
            city_list_str = ', '.join(chunk)
            await message.answer(f"–ß–∞—Å—Ç—å {i} –∏–∑ {len(city_chunks)}:\n\n{city_list_str}")
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(SearchStates.WAITING_FOR_ACTION)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
            "1Ô∏è‚É£ –ù–∞–π—Ç–∏ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n"
            "2Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.message(SearchStates.WAITING_FOR_DIRECTION)
async def handle_direction(message: Message, state: FSMContext):
    direction_number = message.text.strip()

    if not direction_pattern.match(direction_number):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.03.04).")
        return

    await state.update_data(direction_number=direction_number)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è.")
    await state.set_state(SearchStates.WAITING_FOR_CITY)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(SearchStates.WAITING_FOR_CITY)
async def handle_city(message: Message, state: FSMContext):
    city_input = message.text.strip()

    if not city_input:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    user_data = await state.get_data()
    type_choice = user_data.get('type_choice')

    if type_choice == '1':
        city = find_city(city_input)
    else:
        city = find_city_college(city_input)

    if not city:
        await message.answer(f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ({city_input}) –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
                             "1Ô∏è‚É£ –ù–∞–π—Ç–∏ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n"
                             "2Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤")
        await state.set_state(SearchStates.WAITING_FOR_ACTION)
        return

    direction_number = user_data.get('direction_number')

    if type_choice == '1':
        results = search_by_direction_and_city(direction_number, city)
    else:
        results = search_by_direction_and_city_college(direction_number, city)

    if results:
        response = f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {direction_number} –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
        messages = []
        for result in results:
            entry = f"üéì <b>{result['–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç'] if type_choice == '1' else result['–ö–æ–ª–ª–µ–¥–∂']}</b>\nüìö –¢–∏–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {result['–¢–∏–ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏']}\n\n"

            if len(response) + len(entry) > 4000:
                messages.append(response)
                response = ""

            response += entry

        messages.append(response)

        for msg in messages:
            await message.answer(msg, parse_mode="HTML")
    else:
        await message.answer(
            f"–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {direction_number} –≤ –≥–æ—Ä–æ–¥–µ {city} —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
        )

    await state.set_state(SearchStates.WAITING_FOR_ACTION)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
        "1Ô∏è‚É£ –ù–∞–π—Ç–∏ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n"
        "2Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_unexpected_message(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é. –ù–∞–ø–∏—à–∏—Ç–µ 1 –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏–ª–∏ 2 –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤."
    )
